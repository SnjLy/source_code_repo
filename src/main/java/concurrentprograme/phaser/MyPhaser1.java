package concurrentprograme.phaser;import java.util.Date;import java.util.concurrent.Phaser;import java.util.concurrent.TimeUnit;/** * Created by admin on 2017/4/27. */public class MyPhaser1 extends Phaser {    /**     * 2. 覆盖 onAdvance() 方法。根据 phase 的属性的值，我们将调用不同的辅助方法。如果 phase 等于 0，调用     * studentsArrived() 方法；又如果 phase 等于 1，调用 finishFirstExercise() 方法；又如果 phase     * 等于 2，调用 finishSecondExercise() 方法；再如果 phase 等于 3，调用 finishExam()     * 方法。否则，返回真值，表示phaser已经终结。     * @param phase    阶段数     * @param registeredParties   注册的参与者数     * @return     */    @Override    protected boolean onAdvance(int phase, int registeredParties) {        switch (phase) {            case 0:                return friendsArrived();            case 1:                return orderMeal();            case 2:                return eatMeal();            case 3:                return payment();            default:                return true;        }    }    //第一阶段完成，执行任务点餐，并返回false值来表明phaser将继续执行下一阶段的动作。    private boolean friendsArrived() {        System.out.printf("Phaser: all table member is arrived. The order meal are ready.\n");        System.out.printf("Phaser: We have %d table consumer 准备点餐.\n",  getRegisteredParties());        return false;    }    //第二阶段完成，准备执行任务用餐，并返回false值来表明phaser将继续执行下一阶段的动作。    private boolean orderMeal() {        System.out.printf("Phaser: All the member have finished the order meal.\n");        System.out.printf("Phaser: It's time for eat meal 准备饮食.\n");        return false;    }    //第三阶段完成，准备结账执行任务，并返回false值来表明phaser将继续执行下一阶段的动作。    private boolean eatMeal() {        System.out.printf("Phaser: All the member have finished eat meal.\n");        System.out.printf("Phaser: It's time forpayment 准备付款.\n");        return false;    }    //第四阶段完成，准备结账执行任务，并返回false值来表明phaser将继续执行下一阶段的动作。    private boolean payment() {        System.out.printf("Phaser: All the member have finished the lunch.\n");        System.out.printf("Phaser: Thank you for your dinner.\n");        return true;    }    class Member implements  Runnable{        private Phaser phaser;        public Member(Phaser phaser) {            this.phaser = phaser;        }        @Override        public void run() {            // 11. 首先，方法写一条信息到操控台记录所有朋友到达餐馆并调用 phaser 的 arriveAndAwaitAdvance()            // 方法来等待其他线程们。            System.out.printf("%s: Has arrived restaurant. %s\n", Thread.currentThread().getName(), new Date());            phaser.arriveAndAwaitAdvance();            // 12. 然后第二阶段，全部menber到达餐馆，准备点菜，写另一条信息到操控台并调用 phaser            // 的 arriveAndAwaitAdvance() 方法来等待全部member点餐完成，然后执行下一阶段。            System.out.printf("%s: Is going to order meal. %s\n", Thread.currentThread().getName(), new Date());            doExercise1();            System.out.printf("%s: Has finished order meal. %s\n", Thread.currentThread().getName(), new Date());            phaser.arriveAndAwaitAdvance();            // 13. 为第二场和第三场实现相同的代码。            // 的 arriveAndAwaitAdvance() 方法来等待全部member点餐完成，然后执行下一阶段。            System.out.printf("%s: Is going to eal meal.%s\n", Thread.currentThread().getName(), new Date());            doExercise2();            System.out.printf("%s: Has finished eal meal. %s\n", Thread.currentThread().getName(), new Date());            phaser.arriveAndAwaitAdvance();            // 14. 然后第四阶段，全部menber用餐完成，写另一条信息到操控台并调用 phaser            // 的 arriveAndAwaitAdvance() 方法来等待全部member付款完成，然后执行下一阶段。            System.out.printf("%s: Is going to do payment. %s\n",                    Thread.currentThread().getName(), new Date());            doExercise3();            System.out.printf("%s: Has finished to payment. %s\n", Thread.currentThread().getName(), new Date());            phaser.arriveAndAwaitAdvance();        }        // 14. 点餐。此方法让线程随机休眠一段时间。        private void doExercise1() {            try {                long duration = (long) (Math.random() * 10);                TimeUnit.SECONDS.sleep(duration);                System.out.printf("%s: Is doing ......order meal .\n", Thread.currentThread().getName());            } catch (InterruptedException e) {                e.printStackTrace();            }        }        // 15. 实现辅助方法 doExercise2()。此方法让线程随机休眠一段时间。        private void doExercise2() {            try {                long duration = (long) (Math.random() * 10);                TimeUnit.SECONDS.sleep(duration);                System.out.printf("%s: Is doing ......eat meal .\n", Thread.currentThread().getName());            } catch (InterruptedException e) {                e.printStackTrace();            }        }        // 16. 实现辅助方法 doExercise3()。此方法让线程随机休眠一段时间。        private void doExercise3() {            try {                long duration = (long) (Math.random() * 10);                TimeUnit.SECONDS.sleep(duration);                System.out.printf("%s: Is doing ......payment.\n", Thread.currentThread().getName());            } catch (InterruptedException e) {                e.printStackTrace();            }        }    }    //17.  实现例子的main() 方法。    public static void main(String[] args) {        // 18. 创建 MyPhaser对象。        MyPhaser1 phaser = new MyPhaser1();        // 19. 创建5个顾客 对象并使用register()方法在phaser中注册他们。        Member members[] = new Member[5];        for (int i = 0; i < members.length; i++) {            members[i] = phaser.new Member(phaser);            phaser.register();        }        // 20. 创建5个线程来运行member并开始它们。        Thread threads[] = new Thread[members.length];        for (int i = 0; i < members.length; i++) {            threads[i] = new Thread(members[i], "member- " + i);            threads[i].start();        }        System.out.println("==========all member finished================");        // 21. 等待5个线程的终结。        for (int i = 0; i < threads.length; i++) {            try {                threads[i].join();            } catch ( InterruptedException e ) {                e.printStackTrace();            }        }        // 22. 调用isTerminated()方法来写一条信息表明phaser是在termination状态。        System.out.printf("Main: The phaser has finished: %s.\n", phaser.isTerminated());    }}