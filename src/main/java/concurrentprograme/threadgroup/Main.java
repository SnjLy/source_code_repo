package concurrentprograme.threadgroup;import java.util.Date;import java.util.Random;import java.util.concurrent.TimeUnit;/** * Created by admin on 2017/4/11. */public class Main {    public static void main(String[] args) {        ThreadGroup threadGroup = new ThreadGroup("Searcher");        Result result = new Result();        SearchTask searchTask = new SearchTask(result);        for (int i =0;i<5;i++){            Thread thread = new Thread(threadGroup, searchTask);            thread.start();            try {                TimeUnit.SECONDS.sleep(1);            } catch ( InterruptedException e ) {                e.printStackTrace();            }        }        System.out.println("Numbers of threads:"+threadGroup.activeCount());        System.out.println("Infomation about the thread group");        threadGroup.list();        System.out.println("\n\n");        Thread[] threads = new Thread[threadGroup.activeCount()];        threadGroup.enumerate(threads);        for (int i=0; i<threadGroup.activeCount(); i++) {            System.out.printf("Thread begin: %s: %s\n",threads[i].getName(),threads[i].getState());        }        System.out.println("**************************************\n");        waitFinish(threadGroup);        threadGroup.interrupt();        for (int i=0; i<threadGroup.activeCount(); i++) {            System.out.printf("Thread end: %s: %s\n",threads[i].getName(),threads[i].getState());        }    }    private static void waitFinish(ThreadGroup threadGroup) {        while (threadGroup.activeCount()>4){            try {                TimeUnit.SECONDS.sleep(1);            } catch ( InterruptedException e ) {                e.printStackTrace();            }        }    }}class Result{    private String name; //保存最先结束的线程的名字    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }}class SearchTask implements Runnable{    private Result result;    public SearchTask(Result result) {        this.result = result;    }    @Override    public void run() {        String name =Thread.currentThread().getName();        System.out.printf("Thread %s: start\n", name);        try {            doTask();            result.setName(name);        } catch ( InterruptedException e ) {            System.out.printf("thread %s: interrupted\n", name);        }        System.out.printf("Thread %s : end\n", name);    }    private void doTask() throws InterruptedException {        Random random = new Random((new Date()).getTime());        int value = (int)(random.nextDouble()*100);        System.out.printf("Thread %s: %d\n", Thread.currentThread().getName(), value);        TimeUnit.SECONDS.sleep(value);    }}