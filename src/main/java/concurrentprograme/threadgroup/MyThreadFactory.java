package concurrentprograme.threadgroup;import java.util.ArrayList;import java.util.Date;import java.util.Iterator;import java.util.List;import java.util.concurrent.ThreadFactory;import java.util.concurrent.TimeUnit;/** * Created by admin on 2017/4/11. */public class MyThreadFactory implements ThreadFactory {    private int counter;    private String name;    private List<String> stats;    public MyThreadFactory(String name) {        counter = 0;        this.name = name;        stats = new ArrayList<String>();    }    public String getStats(){        StringBuffer buffer=new StringBuffer();        Iterator<String> it=stats.iterator();        while (it.hasNext()) {            buffer.append(it.next());            buffer.append("\n");        }        return buffer.toString();    }    @Override    public Thread newThread(Runnable r) {        Thread thread = new Thread(r, name +"-thread-"+counter);        counter++;        stats.add(String.format("created thread %d with name %s on %s\n",thread.getId(),thread.getName(),new Date()));        return thread;}    public static void main(String[] args) {        MyThreadFactory factory = new MyThreadFactory("factory");        System.out.printf("Starting the Threads\n");        Task task = new Task();        for (int i=0 ;i<10;i++) {            Thread thread = factory.newThread(task);            thread.start();        }        try {            Thread.sleep(300);        } catch ( InterruptedException e ) {            e.printStackTrace();        }        System.out.printf("Factory stats:\n"); System.out.printf("%s\n",factory.getStats());    }}class Task implements Runnable{    @Override    public void run() {        System.out.println("Thread starting:" +Thread.currentThread().getName());        try {            TimeUnit.SECONDS.sleep(1);        } catch ( InterruptedException e ) {            e.printStackTrace();        }    }}