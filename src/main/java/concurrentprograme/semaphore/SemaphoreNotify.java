package concurrentprograme.semaphore;import java.util.concurrent.Semaphore;/** * Created by admin on 2017/4/11. */public class SemaphoreNotify {    public static void main(String[] args) {        Semaphore semaphore = new Semaphore(5);        SendThread sender = new SendThread(semaphore);        ReceiveThread receiver = new ReceiveThread(semaphore);        new Thread(sender).start();        try {            Thread.sleep(300);        } catch ( InterruptedException e ) {            e.printStackTrace();        }        new Thread(receiver).start();    }}class SendThread implements  Runnable{    private Semaphore semaphore = null;    public SendThread(Semaphore semaphore) {        this.semaphore = semaphore;    }    @Override    public void run() {        for (int i=0;i<10; i++){            try {                semaphore.acquire();                System.out.println("Thread take:"+Thread.currentThread().getName()+"--"+i);            } catch ( InterruptedException e ) {                e.printStackTrace();            }        }    }}class ReceiveThread implements  Runnable{    private Semaphore semaphore = null;    public ReceiveThread(Semaphore semaphore) {        this.semaphore = semaphore;    }    @Override    public void run() {        for (int i = 0; i < 10; i++) {            semaphore.release();            System.out.println("Thread release:" + Thread.currentThread().getName() + "--" + i);        }    }}