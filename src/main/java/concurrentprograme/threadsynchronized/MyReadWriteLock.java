package concurrentprograme.threadsynchronized;import java.io.Writer;import java.util.concurrent.TimeUnit;import java.util.concurrent.locks.Lock;import java.util.concurrent.locks.ReadWriteLock;import java.util.concurrent.locks.ReentrantReadWriteLock;/** * Created by admin on 2017/4/17. */public class MyReadWriteLock {    public static void main(String[] args) {        BookInfo bookInfo = new BookInfo("peace of the world",88);        //创建5个Reader对象，并且用5个线程来执行它们。        Reader readers[]=new Reader[5];        Thread threadsReader[]=new Thread[5];        for (int i=0; i<5; i++){            readers[i]=new Reader(bookInfo);            threadsReader[i]=new Thread(readers[i], "reader-"+i);        }        //创建一个Writer对象，并且用线程来执行它。        Writter writer = new Writter(bookInfo);        Thread threadWriter = new Thread(writer,"write");        for (int i = 0; i < threadsReader.length; i++) {            threadsReader[i].start();        }        threadWriter.start();    }}class BookInfo {    private String name;    private double price;    private ReadWriteLock lock;    public BookInfo(String name, double price) {        this.name = name;        this.price = price;        this.lock = new ReentrantReadWriteLock();    }    public String getName(){        Lock readLock = lock.readLock();        readLock.lock();        String name = this.name;        readLock.unlock();        try {            Thread.sleep(5);        } catch ( InterruptedException e ) {            e.printStackTrace();        }        return name;    }    public double getPrice(){        lock.readLock().lock();        double price = this.price;        lock.readLock().unlock();        return price;    }    public void setBook(String name1, double price1){        lock.writeLock().lock();        this.name = name1;        this.price = price1;        lock.writeLock().unlock();    }}class Reader implements Runnable{    private BookInfo bookInfo;    public Reader(BookInfo bookInfo) {        this.bookInfo = bookInfo;    }    @Override    public void run() {        for (int i = 0; i < 10; i++) {            System.out.printf("%s: Name: %s, Price : %f\n", Thread.                    currentThread().getName(), bookInfo.getName(), bookInfo.getPrice());        }    }}class Writter implements Runnable{    private BookInfo bookInfo;    public Writter(BookInfo bookInfo) {        this.bookInfo = bookInfo;    }    @Override    public void run() {        for (int i = 0; i < 5; i++) {            System.out.printf("Writer: Attempt to modify the book.\n");            bookInfo.setBook("The Fast and the Furious " + (i+1), Math.random() * 8);            System.out.printf("Writer: Prices have been modified.\n");            try {                Thread.sleep(2);            } catch ( InterruptedException e ) {                e.printStackTrace();            }        }    }}