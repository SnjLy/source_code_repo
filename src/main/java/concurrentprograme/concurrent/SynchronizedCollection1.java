package concurrentprograme.concurrent;import com.alibaba.fastjson.JSON;import java.util.*;import java.util.concurrent.ConcurrentHashMap;/** * java 容器线程安全 * Created by yehao on 2017/3/31. */public class SynchronizedCollection1 implements Runnable {    private List list= Collections.synchronizedList(new ArrayList());    //private ArrayList list = new ArrayList();    private Map map = new ConcurrentHashMap();    public Map getMap() {        return map;    }    public void setMap(Map map) {        this.map = map;    }    public List getList() {        return list;    }    public void run(){        listMethod1(list);        //mapMethod(map);    }    public void listMethod1(List list){        System.out.println("thread name:"+Thread.currentThread().getName()+"---------"+JSON.toJSONString(list));        list.add(Thread.currentThread().getId()+"-"+Thread.currentThread().getName());        for (int i=0; i<list.size(); i++){            System.out.print("\n\nthread name:"+Thread.currentThread().getName() );            if (i==1){                list.add("这是第："+list.size()+"次修改");            }        }        System.out.println("thread name:"+Thread.currentThread().getName() +"********"+JSON.toJSONString(list));    }    //线程安全方法    public synchronized void mapMethod(Map map){        System.out.println("thread name:"+Thread.currentThread().getName()+"---------"+JSON.toJSON(map));        map.put(Thread.currentThread().getId(), Thread.currentThread().getName());        for (int i=0; i<map.size(); i++){            System.out.print("\n\nthread name:"+Thread.currentThread().getName() );            if (i==1){                map.put(Thread.currentThread().getName(), "这是第："+map.size()+"次修改");            }        }        System.out.println("thread name:"+Thread.currentThread().getName() +"********"+JSON.toJSON(map));    }    public static void main(String[] args) {        SynchronizedCollection1 thread = new SynchronizedCollection1();        for (int i = 0; i < 5; i++) {            new Thread(thread).start();        }    }}